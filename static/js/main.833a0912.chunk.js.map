{"version":3,"sources":["components/ByteTableRowSpec.tsx","util/hexUtils.ts","audio/OggPage.ts","util/DataWindow.ts","audio/oggParser.ts","audio/packetExtractor.ts","components/App.tsx","components/ByteTableRow.tsx","components/OggPageHeaderTable.tsx","components/showHexHook.tsx","audio/OggOpusCommentHeader.ts","audio/OggOpusIdentificationHeader.ts","components/OggOpusCommentHeaderTable.tsx","components/cellArranger.ts","components/OggOpusIdentificationHeaderTable.tsx","components/OggPacketsList.tsx","components/OggPagesTab.tsx","components/BitstreamsTab.tsx","index.tsx"],"names":["CellInterpretationType","asHexString","buffer","space","Array","from","Uint8Array","map","asHexPair","join","n","toString","slice","OggPage","dataWindow","getSegmentSize","segmentIndex","getByte","getSegment","segments","TextDecoder","decode","this","getArrayBufferSlice","headerType","getBigInt64","getInt32","_","range","numberOfPageSegments","offset","headerSize","i","segmentSize","segment","push","sum","segmentSizes","DataWindow","arrayBuffer","bytes","dataView","getInt16","getUint32","getUint16","getUint8","length","slide","DataView","CodecIdentifier","startsWith","packet","isEqual","Math","min","byteLength","takeBytes","detectStreamType","stream","packets","firstPacket","concatenateArrayBuffers","buffers","array","sumBy","set","AppTab","singleCellInterpretation","label","type","SINGLE","multipleCellInterpretation","labels","MULTIPLE","ByteTable","showHex","rows","className","row","startByte","endByte","cells","cell","width","hex","byte","rowSpec","ByteTableRow","getHex","j","take","rowSpan","colour","colSpan","header","classNames","interpretation","describeHeaderType","page","parts","containsContinuedPacket","isFirstPage","isLastPage","OggPageHeaderTable","rowSpecs","capturePattern","version","granulePosition","bitstreamSerialNumber","pageSequenceNumber","crcChecksum","getPageSegmentLengthRows","chunk","segmentIndices","ShowHexContext","React","createContext","setShowHex","useShowHex","useContext","ShowHexProvider","children","useState","Provider","value","isOggOpusCommentHeader","OggOpusCommentHeader","vendorStringLength","isOggOpusIdentificationHeader","OggOpusIdentificationHeader","OggOpusCommentHeaderTable","magicSignature","tableWidth","cellsInCurrentRow","spaceUsedInCurrentRow","spaceLeftInCurrentRow","initialCell","restWidth","numberOfFullRows","floor","fullRows","finalCellWidth","finalCell","arrangeCellsIntoRows","vendorString","userCommentListLength","OggOpusIdentificationHeaderTable","channelCount","preSkip","inputSampleRate","outputGain","channelMappingFamily","isUnknownPacket","OggPacketsList","Fragment","href","OggPagesTab","oggPages","pageNumber","setPageNumber","useEffect","oggPage","undefined","segmentsSoFar","isFirstPacket","extractPacketsEntirelyContainedWithinPage","pageSize","onClick","disabled","number","size","SegmentInfo","BitstreamsTab","streams","serialNumber","selectedStreamSerialNumber","setSelectedStreamSerialNumber","find","id","name","checked","onChange","htmlFor","opusFile","process","fetchBinaryFile","url","a","fetch","response","blob","App","Main","setOggPages","bitstreams","setBitstreams","OGG_PAGES","tab","setTab","importFile","pages","parseOggPages","packetInfoPerStream","Map","completedLogicalStreams","packetInfo","get","Error","delete","extractBitstreams","then","BITSTREAMS","onDrop","file","Dropzone","onDropAccepted","useCallback","acceptedFiles","useDropzone","accept","getRootProps","getInputProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.833a0912.chunk.js","sourcesContent":["export enum CellInterpretationType {\n  SINGLE = 'SINGLE',\n  MULTIPLE = 'MULTIPLE',\n}\n\nexport interface SingleCellInterpretation {\n  type: CellInterpretationType.SINGLE\n  label: string\n}\n\nexport interface MultipleCellInterpretation {\n  type: CellInterpretationType.MULTIPLE\n  labels: string[]\n}\n\nexport type CellInterpretation = SingleCellInterpretation | MultipleCellInterpretation\n\nexport const singleCellInterpretation = (label: string): SingleCellInterpretation => ( {\n  type: CellInterpretationType.SINGLE,\n  label\n})\n\nexport const multipleCellInterpretation = (labels: string[]): MultipleCellInterpretation => ( {\n  type: CellInterpretationType.MULTIPLE,\n  labels\n})\n\nexport interface ByteTableRowSpec {\n  cells: ByteTableCellSpec[]\n}\n\nexport interface ByteTableCellSpec {\n  width: number\n  header?: string\n  interpretation?: CellInterpretation\n  colour: number\n}\n\n","export const asHexString = (buffer: ArrayBuffer, space: boolean = false): string =>\n  Array.from(new Uint8Array(buffer))\n    .map(asHexPair)\n    .join(space ? ' ' : '')\n\nexport const asHexPair = (n: number): string => ('0' + n.toString(16)).slice(-2)\n","import _ from 'lodash'\nimport { DataWindow } from '../util/DataWindow'\nimport { asHexString } from '../util/hexUtils'\nimport { Bytes } from '../util/types'\n\nexport type BitstreamSerialNumber = string\n\nexport class OggPage {\n  constructor(readonly dataWindow: DataWindow) {}\n\n  get capturePattern(): string {\n    return new TextDecoder().decode(this.dataWindow.getArrayBufferSlice(0, 4))\n  }\n\n  get version(): number {\n    return this.dataWindow.getByte(4)\n  }\n\n  private get headerType(): number {\n    return this.dataWindow.getByte(5)\n  }\n\n  get containsContinuedPacket(): boolean {\n    return !!(this.headerType & (1 << 0))\n  }\n\n  get isFirstPage(): boolean {\n    return !!(this.headerType & (1 << 1))\n  }\n\n  get isLastPage(): boolean {\n    return !!(this.headerType & (1 << 2))\n  }\n\n  get granulePosition(): bigint {\n    return this.dataWindow.getBigInt64(6)\n  }\n\n  get bitstreamSerialNumber(): string {\n    return asHexString(this.dataWindow.getArrayBufferSlice(14, 4))\n  }\n\n  get pageSequenceNumber(): number {\n    return this.dataWindow.getInt32(18)\n  }\n\n  get crcChecksum(): string {\n    return asHexString(this.dataWindow.getArrayBufferSlice(22, 4))\n  }\n\n  get numberOfPageSegments(): number {\n    return this.dataWindow.getByte(26)\n  }\n\n  getSegmentSize = (segmentIndex: number): Bytes => this.dataWindow.getByte(27 + segmentIndex)\n\n  get segmentSizes(): Bytes[] {\n    return _.range(this.numberOfPageSegments).map(this.getSegmentSize)\n  }\n\n  get segments(): ArrayBuffer[] {\n    let offset = this.headerSize\n    const segments: ArrayBuffer[] = []\n    for (let i = 0; i < this.numberOfPageSegments; i++) {\n      const segmentSize = this.getSegmentSize(i)\n      const segment = this.dataWindow.getArrayBufferSlice(offset, segmentSize)\n      segments.push(segment)\n      offset += segmentSize\n    }\n    return segments\n  }\n\n  getSegment = (segmentIndex: number): ArrayBuffer => this.segments[segmentIndex]\n\n  get headerSize(): Bytes {\n    return 27 + this.numberOfPageSegments\n  }\n\n  get pageSize(): Bytes {\n    return this.headerSize + _.sum(this.segmentSizes)\n  }\n}\n","export class DataWindow {\n  private readonly bytes: Uint8Array\n  private readonly dataView: DataView\n  private readonly offset: number\n\n  constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n    this.bytes = new Uint8Array(arrayBuffer)\n    this.dataView = new DataView(arrayBuffer)\n    this.offset = offset\n  }\n\n  getByte = (offset: number): number => this.bytes[offset + this.offset]\n\n  getBigInt64 = (offset: number): bigint => this.dataView.getBigInt64(offset + this.offset, true)\n\n  getInt16 = (offset: number): number => this.dataView.getInt16(offset + this.offset, true)\n\n  getInt32 = (offset: number): number => this.dataView.getInt32(offset + this.offset, true)\n\n  getUint32 = (offset: number): number => this.dataView.getUint32(offset + this.offset, true)\n\n  getUint16 = (offset: number): number => this.dataView.getUint16(offset + this.offset, true)\n\n  getUint8 = (offset: number): number => this.dataView.getUint8(offset + this.offset)\n\n  getArrayBufferSlice = (offset: number, length: number): ArrayBuffer =>\n    this.bytes.slice(this.offset + offset, this.offset + offset + length).buffer\n\n  slide = (offset: number): DataWindow => new DataWindow(this.bytes.buffer, this.offset + offset)\n}\n","import { OggPage } from './OggPage'\nimport { DataWindow } from '../util/DataWindow'\nimport { LogicalBitstream } from './packetExtractor'\nimport { Option } from '../util/util'\nimport _ from 'lodash'\n\nexport const parseOggPages = (arrayBuffer: ArrayBuffer): OggPage[] => {\n    let dataWindow = new DataWindow(arrayBuffer)\n    let page = new OggPage(dataWindow)\n    const pages = [page]\n    while (!page.isLastPage) {\n      dataWindow = dataWindow.slide(page.pageSize)\n      page = new OggPage(dataWindow)\n      pages.push(page)\n    }\n    return pages\n  }\n\nconst CodecIdentifier = {\n  Opus: [0x4f, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64], // 'OpusHead'\n  Theora: [0x80, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x61], // '\\x80theora'\n  Vorbis: [0x01, 0x76, 0x6f, 0x72, 0x62, 0x69, 0x73], // '\\x01vorbis'\n  OggSkeleton: [0x66, 0x69, 0x73, 0x68, 0x65, 0x61, 0x64, 0x00], // 'fishead\\0'\n}\n\nconst takeBytes = (packet: ArrayBuffer, n: number): number[] =>\n  Array.from(new Uint8Array(packet.slice(0, Math.min(n, packet.byteLength))))\n\nconst startsWith = (packet: ArrayBuffer, bytes: number[]): boolean =>\n  _.isEqual(takeBytes(packet, bytes.length), bytes)\n\nexport const detectStreamType = (stream: LogicalBitstream): Option<string> => {\n  if (stream.packets.length === 0) {\n    return undefined\n  }\n  const firstPacket = stream.packets[0]\n  if (startsWith(firstPacket, CodecIdentifier.Opus)) return 'opus'\n  if (startsWith(firstPacket, CodecIdentifier.Theora)) return 'theora'\n  if (startsWith(firstPacket, CodecIdentifier.Vorbis)) return 'vorbis'\n  if (startsWith(firstPacket, CodecIdentifier.OggSkeleton)) return 'ogg-skeleton'\n  return undefined\n}\n","import { BitstreamSerialNumber, OggPage } from './OggPage'\nimport _ from 'lodash'\n\nexport interface LogicalBitstream {\n  readonly serialNumber: BitstreamSerialNumber\n  readonly packets: ArrayBuffer[]\n}\n\ninterface PacketInfo {\n  packets: ArrayBuffer[]\n  segmentsSoFar: ArrayBuffer[]\n}\n\nexport const extractBitstreams = (pages: OggPage[]): LogicalBitstream[] => {\n  const packetInfoPerStream = new Map<BitstreamSerialNumber, PacketInfo>()\n  const completedLogicalStreams: LogicalBitstream[] = []\n  for (const page of pages) {\n    if (page.isFirstPage) {\n      packetInfoPerStream.set(page.bitstreamSerialNumber, { packets: [], segmentsSoFar: [] })\n    }\n    const packetInfo = packetInfoPerStream.get(page.bitstreamSerialNumber)\n    if (packetInfo === undefined) {\n      throw Error(`Unexpected page for bitstream with serial number ${page.bitstreamSerialNumber}`)\n    }\n    for (const segment of page.segments) {\n      packetInfo.segmentsSoFar.push(segment)\n      const segmentCompletesPacket = segment.byteLength < 255\n      if (segmentCompletesPacket) {\n        const packet = concatenateArrayBuffers(packetInfo.segmentsSoFar)\n        packetInfo.packets.push(packet)\n        packetInfo.segmentsSoFar.length = 0\n      }\n    }\n    if (page.isLastPage) {\n      completedLogicalStreams.push({ serialNumber: page.bitstreamSerialNumber, packets: packetInfo.packets })\n      packetInfoPerStream.delete(page.bitstreamSerialNumber)\n    }\n  }\n  // Automatically finish any streams that don't have explicit end-of-stream pages\n  for (const [serialNumber, packetInfo] of packetInfoPerStream) {\n    completedLogicalStreams.push({ serialNumber, packets: packetInfo.packets })\n  }\n  return completedLogicalStreams\n}\n\nconst concatenateArrayBuffers = (buffers: ArrayBuffer[]): ArrayBuffer => {\n  const array = new Uint8Array(_.sumBy(buffers, (buffer) => buffer.byteLength))\n  let offset = 0\n  for (const buffer of buffers) {\n    array.set(new Uint8Array(buffer), offset)\n    offset += buffer.byteLength\n  }\n  return array.buffer\n}\n\nexport const extractPacketsEntirelyContainedWithinPage = (page: OggPage): ArrayBuffer[] => {\n  const packets: ArrayBuffer[] = []\n  const segmentsSoFar: ArrayBuffer[] = []\n  var isFirstPacket = true\n  for (const segment of page.segments) {\n    segmentsSoFar.push(segment)\n    const segmentCompletesPacket = segment.byteLength < 255\n    if (segmentCompletesPacket) {\n      const packet = concatenateArrayBuffers(segmentsSoFar)\n      if (!(page.containsContinuedPacket && isFirstPacket)) { // skip continuation packet\n        packets.push(packet)\n      }\n      segmentsSoFar.length = 0\n      isFirstPacket = false\n    }\n  }\n  return packets\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { OggPage } from '../audio/OggPage'\nimport { parseOggPages } from '../audio/oggParser'\nimport { LogicalBitstream, extractBitstreams } from '../audio/packetExtractor'\nimport { useDropzone } from 'react-dropzone'\n\nimport './App.scss'\nimport { OggPagesTab } from './OggPagesTab'\nimport { ShowHexProvider, useShowHex } from './showHexHook'\nimport { BitstreamsTab } from './BitstreamsTab'\n\nconst opusFile = `${process.env.PUBLIC_URL}/example_0.opus`\n\nenum AppTab {\n  OGG_PAGES = 'OGG_PAGES',\n  BITSTREAMS = 'BITSTREAMS',\n}\n\nconst fetchBinaryFile = async (url: string): Promise<ArrayBuffer> => {\n  const response = await fetch(url)\n  const blob = await response.blob()\n  return await blob.arrayBuffer()\n}\n\nexport const App = () => (\n  <ShowHexProvider>\n    <Main />\n  </ShowHexProvider>\n)\n\nconst Main = () => {\n  const [oggPages, setOggPages] = useState<OggPage[]>()\n  const [bitstreams, setBitstreams] = useState<LogicalBitstream[]>([])\n  const [tab, setTab] = useState<AppTab>(AppTab.OGG_PAGES)\n  const { showHex, setShowHex } = useShowHex()\n  const importFile = (arrayBuffer: ArrayBuffer) => {\n    const oggPages = parseOggPages(arrayBuffer)\n    const bitstreams = extractBitstreams(oggPages)\n    setOggPages(oggPages)\n    setBitstreams(bitstreams)\n  }\n  useEffect(() => {\n    fetchBinaryFile(opusFile).then(importFile)\n  }, [])\n  return (\n    <div className=\"app\">\n      <button onClick={() => setTab(AppTab.OGG_PAGES)} disabled={tab === AppTab.OGG_PAGES}>\n        Ogg Pages\n      </button>\n      <button onClick={() => setTab(AppTab.BITSTREAMS)} disabled={tab === AppTab.BITSTREAMS}>\n        Logical Bitstreams\n      </button>\n      <div className=\"show-hex-checkbox\">\n        <label htmlFor=\"showHex\">Show Hex</label>\n        <input id=\"showHex\" onChange={() => setShowHex(!showHex)} checked={showHex} type=\"checkbox\" />\n      </div>\n      <Dropzone onDrop={async (file) => importFile(await file.arrayBuffer())} />\n      {tab === AppTab.OGG_PAGES && <OggPagesTab oggPages={oggPages ?? []} />}\n      {tab === AppTab.BITSTREAMS && <BitstreamsTab streams={bitstreams} />}\n    </div>\n  )\n}\n\ninterface DropzoneProps {\n  onDrop(file: File): void\n}\n\nconst Dropzone = ({ onDrop }: DropzoneProps) => {\n  const onDropAccepted = useCallback((acceptedFiles: File[]) => onDrop(acceptedFiles[0]), [onDrop])\n  const { getRootProps, getInputProps } = useDropzone({ onDropAccepted, accept: ['audio/ogg', 'video/ogg', 'application/ogg', 'audio/opus'] })\n\n  return (\n    <div className=\"dropzone\" {...getRootProps()}>\n      <input {...getInputProps()} />\n      Click here or drop an Ogg file to upload\n    </div>\n  )\n}\n","import classNames from 'classnames'\nimport _ from 'lodash'\nimport { DataWindow } from '../util/DataWindow'\nimport { asHexPair } from '../util/hexUtils'\nimport { Bytes } from '../util/types'\nimport { ByteTableRowSpec, CellInterpretationType } from './ByteTableRowSpec'\nexport interface ByteTableProps {\n  showHex: boolean\n  rows: ByteTableRowSpec[]\n  dataWindow: DataWindow\n}\n\nconst TableWidth: Bytes = 4\n\nexport const ByteTable = ({ dataWindow, showHex, rows }: ByteTableProps) => (\n  <table className=\"byte-table\">\n    <tbody>\n      {rows.map((row, i) => {\n        const startByte = i * TableWidth\n        const endByte = startByte + _.sumBy(row.cells, cell => cell.width) - 1\n        const hex = _.range(startByte, endByte + 1).map(byte => asHexPair(dataWindow.getByte(byte)))\n        return (\n          <ByteTableRow key={`byte-table-row-${i}`} showHex={showHex} rowSpec={row} startByte={startByte} endByte={endByte} hex={hex} />\n        )\n      })}\n    </tbody>\n  </table>\n)\n\nexport interface ByteTableRowProps {\n  startByte: number\n  endByte: number\n  showHex: boolean\n  rowSpec: ByteTableRowSpec\n  hex: string[]\n}\n\nexport const ByteTableRow = ({ startByte, endByte, showHex, rowSpec, hex }: ByteTableRowProps) => {\n  const { cells } = rowSpec\n  const getHex =  (i: number, j: number): string => \n    hex[_.sumBy(_.take(cells, i), cell => cell.width) + j]\n  return (\n    <>\n      <tr>\n        <th className=\"byte-table__byte-header-cell\" rowSpan={showHex ? 3 : 2}>\n          {startByte}-{endByte}\n        </th>\n        {cells.map((cell, i) => (\n          <td\n            key={`byte-table-header-row-${i}`}\n            className={`byte-table__header-cell byte-table__cell-style-${cell.colour} byte-table__border-right`}\n            colSpan={cell.width}\n          >\n            {cell.header ?? <>&nbsp;</>}\n          </td>\n        ))}\n      </tr>\n      {showHex && (\n        <tr>\n          {cells.map((cell, i) =>\n            _.range(cell.width).map(j => (\n              <td\n                key={`byte-table-hex-row-${i}-${j}`}\n                className={classNames('byte-table__hex-cell', `byte-table__cell-style-${cell.colour}`, {\n                  'byte-table__border-right': j === cell.width - 1,\n                })}\n              >\n                {getHex(i, j)}\n              </td>\n            ))\n          )}\n        </tr>\n      )}\n      <tr className=\"byte-table-row3\">\n        {cells.map((cell, i) =>\n          cell.interpretation?.type === CellInterpretationType.MULTIPLE ? (\n            cell.interpretation.labels.map((label, j) => (\n              <td\n                key={`byte-table-interpretation-${i}-${j}`}\n                className={classNames('byte-table__interpretation-cell', `byte-table__cell-style-${cell.colour}`, {\n                  'byte-table__border-right': j === cell.width - 1,\n                })}\n              >\n                {label}\n              </td>\n            ))\n          ) : (\n            <td\n              key={`byte-table-interpretation-${i}`}\n              className={`byte-table__interpretation-cell byte-table__cell-style-${cell.colour} byte-table__border-right`}\n              colSpan={cell.width}\n            >\n              {cell.interpretation?.label ?? <>&nbsp;</>}\n            </td>\n          )\n        )}\n      </tr>\n    </>\n  )\n}\n","import _ from 'lodash'\nimport { OggPage } from '../audio/OggPage'\nimport { ByteTable } from './ByteTableRow'\nimport {\n  ByteTableRowSpec,\n  ByteTableCellSpec,\n  multipleCellInterpretation,\n  singleCellInterpretation,\n} from './ByteTableRowSpec'\nexport interface OggPageTableProps {\n  page: OggPage\n  showHex: boolean\n}\n\nconst describeHeaderType = (page: OggPage): string => {\n  const parts = []\n  page.containsContinuedPacket && parts.push('Contains continued packet')\n  page.isFirstPage && parts.push('First page')\n  page.isLastPage && parts.push('Last page')\n  return parts.join(', ')\n}\n\nexport const OggPageHeaderTable = ({ page, showHex }: OggPageTableProps) => {\n  const rowSpecs: ByteTableRowSpec[] = [\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 1,\n          header: 'Capture Pattern',\n          interpretation: multipleCellInterpretation(_.range(4).map((i) => page.capturePattern[i])),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 1,\n          colour: 2,\n          header: 'Version',\n          interpretation: singleCellInterpretation(page.version.toString()),\n        },\n        {\n          width: 1,\n          colour: 3,\n          header: 'Header Type',\n          interpretation: singleCellInterpretation(describeHeaderType(page)),\n        },\n        {\n          width: 2,\n          colour: 4,\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 4,\n          header: 'Granule Position',\n          interpretation: singleCellInterpretation(page.granulePosition.toString()),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 2,\n          colour: 4,\n        },\n        {\n          width: 2,\n          colour: 5,\n          header: 'Bitstream Serial Number',\n          interpretation: singleCellInterpretation(page.bitstreamSerialNumber),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 2,\n          colour: 5,\n        },\n        {\n          width: 2,\n          colour: 6,\n          header: 'Page Sequence Number',\n          interpretation: singleCellInterpretation(page.pageSequenceNumber.toString()),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 2,\n          colour: 6,\n        },\n        {\n          width: 2,\n          colour: 7,\n          header: 'CRC Checksum',\n          interpretation: singleCellInterpretation(page.crcChecksum),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 2,\n          colour: 7,\n        },\n        {\n          width: 1,\n          colour: 8,\n          header: 'Page Segments',\n          interpretation: singleCellInterpretation(page.numberOfPageSegments.toString()),\n        },\n        ...(page.numberOfPageSegments === 0\n          ? []\n          : [\n              {\n                width: 1,\n                colour: 9,\n                header: 'Segment 1 Size',\n                interpretation: singleCellInterpretation(page.getSegmentSize(0).toString()),\n              } as ByteTableCellSpec,\n            ]),\n      ],\n    },\n    ...getPageSegmentLengthRows(page),\n  ]\n  return <ByteTable dataWindow={page.dataWindow} showHex={showHex} rows={rowSpecs} />\n}\n\nconst getPageSegmentLengthRows = (page: OggPage): ByteTableRowSpec[] =>\n  _.chunk(_.range(1, page.numberOfPageSegments), 4).map(\n    (segmentIndices) =>\n      ({\n        cells: segmentIndices.map((segmentIndex) => ({\n          width: 1,\n          colour: 9,\n          header: `Segment ${segmentIndex + 1} size`,\n          interpretation: singleCellInterpretation(page.getSegmentSize(segmentIndex).toString()),\n        })),\n      })\n  )\n","import React, { ReactNode, useContext, useState } from 'react'\n\nexport interface ShowHexContextContents {\n  showHex: boolean\n\n  setShowHex(b: boolean): void\n}\n\nconst ShowHexContext = React.createContext<ShowHexContextContents>({\n  showHex: false,\n  setShowHex: () => undefined\n})\n\nexport const useShowHex = (): ShowHexContextContents => useContext(ShowHexContext)\n\nexport const ShowHexProvider = ({ children }: { children?: ReactNode | undefined }) => {\n  const [showHex, setShowHex] = useState<boolean>(false)\n\n  return <ShowHexContext.Provider value={{ showHex, setShowHex }}>{children}</ShowHexContext.Provider>\n}\n","import { DataWindow } from '../util/DataWindow'\n\nexport const isOggOpusCommentHeader = (packet: ArrayBuffer): boolean => {\n  if (packet.byteLength < 8) {\n    return false\n  }\n  const magicSignature = new TextDecoder().decode(packet.slice(0, 8))\n  return magicSignature === 'OpusTags'\n}\nexport class OggOpusCommentHeader {\n  constructor(readonly dataWindow: DataWindow) {}\n\n  get magicSignature(): string {\n    return new TextDecoder().decode(this.dataWindow.getArrayBufferSlice(0, 8))\n  }\n\n  get vendorStringLength(): number {\n    return this.dataWindow.getUint32(8)\n  }\n\n  get vendorString(): string {\n    return new TextDecoder().decode(this.dataWindow.getArrayBufferSlice(12, this.vendorStringLength))\n  }\n\n  get userCommentListLength(): number {\n    return this.dataWindow.getUint32(12 + this.vendorStringLength)\n  }\n}\n","import { DataWindow } from '../util/DataWindow'\n\nexport const isOggOpusIdentificationHeader = (packet: ArrayBuffer): boolean => {\n  if (packet.byteLength < 8) {\n    return false\n  }\n  const magicSignature = new TextDecoder().decode(packet.slice(0, 8))\n  return magicSignature === 'OpusHead'\n}\n\nexport class OggOpusIdentificationHeader {\n  constructor(readonly dataWindow: DataWindow) {}\n\n  get magicSignature(): string {\n    return new TextDecoder().decode(this.dataWindow.getArrayBufferSlice(0, 8))\n  }\n\n  get version(): number {\n    return this.dataWindow.getUint8(8)\n  }\n\n  get channelCount(): number {\n    return this.dataWindow.getUint8(9)\n  }\n\n  get preSkip(): number {\n    return this.dataWindow.getUint16(10)\n  }\n\n  get inputSampleRate(): number {\n    return this.dataWindow.getUint32(12)\n  }\n\n  get outputGain(): number {\n    return this.dataWindow.getInt16(16)\n  }\n\n  get channelMappingFamily(): number {\n    return this.dataWindow.getUint8(18)\n  }\n}\n","import _ from 'lodash'\nimport { OggOpusCommentHeader } from '../audio/OggOpusCommentHeader'\nimport { ByteTable } from './ByteTableRow'\nimport { ByteTableRowSpec, multipleCellInterpretation, singleCellInterpretation } from './ByteTableRowSpec'\nimport { arrangeCellsIntoRows } from './cellArranger'\n\nexport interface OggOpusCommentHeaderTableProps {\n  header: OggOpusCommentHeader\n  showHex: boolean\n}\n\nexport const OggOpusCommentHeaderTable = ({ header, showHex }: OggOpusCommentHeaderTableProps) => {\n  const rowSpecs: ByteTableRowSpec[] = [\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 1,\n          header: 'Magic Signature',\n          interpretation: multipleCellInterpretation(_.range(4).map((i) => header.magicSignature[i])),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 1,\n          interpretation: multipleCellInterpretation(_.range(4, 4 + 4).map((i) => header.magicSignature[i])),\n        },\n      ],\n    },\n    ...arrangeCellsIntoRows(\n      [\n        {\n          width: 4,\n          colour: 2,\n          header: 'Vendor String Length',\n          interpretation: singleCellInterpretation(header.vendorStringLength.toString()),\n        },\n        {\n          width: header.vendorString.length,\n          colour: 3,\n          header: 'Vendor String',\n          interpretation: singleCellInterpretation(header.vendorString),\n        },\n        {\n          width: 4,\n          colour: 4,\n          header: 'User Comment List Length',\n          interpretation: singleCellInterpretation(header.userCommentListLength.toString()),\n        },\n      ],\n      4\n    ),\n  ]\n\n  return <ByteTable dataWindow={header.dataWindow} showHex={showHex} rows={rowSpecs} />\n}\n","import { ByteTableCellSpec, ByteTableRowSpec } from './ByteTableRowSpec'\nimport _ from 'lodash'\n\nexport const arrangeCellsIntoRows = (cells: ByteTableCellSpec[], tableWidth: number): ByteTableRowSpec[] => {\n  const rows: ByteTableRowSpec[] = []\n  const cellsInCurrentRow: ByteTableCellSpec[] = []\n  const spaceUsedInCurrentRow = () => _.sumBy(cellsInCurrentRow, (cell) => cell.width)\n  for (const cell of cells) {\n    const spaceLeftInCurrentRow = tableWidth - spaceUsedInCurrentRow()\n    if (cell.width <= spaceLeftInCurrentRow) {\n      // Can fit in the current row\n      cellsInCurrentRow.push(cell)\n      if (spaceUsedInCurrentRow() === tableWidth) {\n        rows.push({ cells: [...cellsInCurrentRow] })\n        cellsInCurrentRow.length = 0\n      }\n    } else {\n      // Going to have to wrap\n\n      // Initial cell to finish off current row:\n      const initialCell: ByteTableCellSpec = {\n        colour: cell.colour,\n        width: spaceLeftInCurrentRow,\n        header: cell.header,\n        interpretation: cell.interpretation,\n      }\n      cellsInCurrentRow.push(initialCell)\n      rows.push({ cells: [...cellsInCurrentRow] })\n      cellsInCurrentRow.length = 0\n\n      // Full rows:\n      const restWidth = cell.width - initialCell.width\n      const numberOfFullRows = Math.floor(restWidth / tableWidth)\n      const fullRows = _.range(numberOfFullRows).map<ByteTableRowSpec>((_) => ({\n        cells: [\n          {\n            colour: cell.colour,\n            width: tableWidth,\n          },\n        ],\n      }))\n      rows.push(...fullRows)\n\n      // Final cell if needed:\n      const finalCellWidth = restWidth % tableWidth\n      if (finalCellWidth > 0) {\n        const finalCell: ByteTableCellSpec = {\n          colour: cell.colour,\n          width: finalCellWidth,\n        }\n        cellsInCurrentRow.push(finalCell)\n      }\n    }\n  }\n\n  // Add an uncompleted row if needed\n  if (cellsInCurrentRow.length > 0) {\n    rows.push({ cells: [...cellsInCurrentRow] })\n    cellsInCurrentRow.length = 0\n  }\n  return rows\n}\n","import _ from 'lodash'\nimport { OggOpusIdentificationHeader } from '../audio/OggOpusIdentificationHeader'\nimport { ByteTable } from './ByteTableRow'\nimport { ByteTableRowSpec, multipleCellInterpretation, singleCellInterpretation } from './ByteTableRowSpec'\n\nexport interface OggOpusIdentificationHeaderTableProps {\n  header: OggOpusIdentificationHeader\n  showHex: boolean\n}\n\nexport const OggOpusIdentificationHeaderTable = ({ header, showHex }: OggOpusIdentificationHeaderTableProps) => {\n  const rowSpecs: ByteTableRowSpec[] = [\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 1,\n          header: 'Magic Signature',\n          interpretation: multipleCellInterpretation(_.range(4).map((i) => header.magicSignature[i])),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 1,\n          interpretation: multipleCellInterpretation(_.range(4, 4 + 4).map((i) => header.magicSignature[i])),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 1,\n          colour: 2,\n          header: 'Version',\n          interpretation: singleCellInterpretation(header.version.toString()),\n        },\n        {\n          width: 1,\n          colour: 3,\n          header: 'Channel Count',\n          interpretation: singleCellInterpretation(header.channelCount.toString()),\n        },\n        {\n          width: 2,\n          colour: 4,\n          header: 'Pre-skip',\n          interpretation: singleCellInterpretation(header.preSkip.toString()),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 4,\n          colour: 5,\n          header: 'Input Sample Rate',\n          interpretation: singleCellInterpretation(header.inputSampleRate.toString()),\n        },\n      ],\n    },\n    {\n      cells: [\n        {\n          width: 2,\n          colour: 6,\n          header: 'Output Gain',\n          interpretation: singleCellInterpretation(header.outputGain.toString()),\n        },\n        {\n          width: 1,\n          colour: 7,\n          header: 'Mapping Family',\n          interpretation: singleCellInterpretation(header.channelMappingFamily.toString()),\n        },\n      ],\n    },\n  ]\n  return (\n    <ByteTable dataWindow={header.dataWindow} showHex={showHex} rows={rowSpecs} />\n  )\n}\n","import React from 'react'\n\nimport './App.scss'\nimport { asHexString } from '../util/hexUtils'\nimport { isOggOpusCommentHeader, OggOpusCommentHeader } from '../audio/OggOpusCommentHeader'\nimport { isOggOpusIdentificationHeader, OggOpusIdentificationHeader } from '../audio/OggOpusIdentificationHeader'\nimport { DataWindow } from '../util/DataWindow'\nimport { OggOpusCommentHeaderTable } from './OggOpusCommentHeaderTable'\nimport { OggOpusIdentificationHeaderTable } from './OggOpusIdentificationHeaderTable'\n\nexport interface OggPacketsListProps {\n  showHex: boolean\n  packets: ArrayBuffer[]\n}\n\nconst isUnknownPacket = (packet: ArrayBuffer): boolean =>\n  !isOggOpusIdentificationHeader(packet) && !isOggOpusCommentHeader(packet)\n\nexport const OggPacketsList = ({ packets, showHex }: OggPacketsListProps) => (\n  <>\n    {packets.map((packet, i) => (\n      <React.Fragment key={`packet-${i}`}>\n        {isUnknownPacket(packet) && (\n          <>\n            <h3>\n              Packet {i + 1} ({packet.byteLength} bytes)\n            </h3>\n            {showHex && (\n              <div className=\"raw-hex\" key={`packet-hex-${i}`}>\n                {asHexString(packet, true)}\n              </div>\n            )}\n          </>\n        )}\n        {isOggOpusIdentificationHeader(packet) && (\n          <>\n            <h3>\n              Packet {i + 1} ({packet.byteLength} bytes) - Ogg Opus Identification Header\n            </h3>\n            <p>\n              <a className=\"rfc-link\" href=\"https://datatracker.ietf.org/doc/html/rfc7845#section-5.1\">\n                RFC 7845 - 5.1. Identification Header\n              </a>\n            </p>\n            <OggOpusIdentificationHeaderTable\n              header={new OggOpusIdentificationHeader(new DataWindow(packet))}\n              showHex={showHex}\n            />\n            <p />\n          </>\n        )}\n        {isOggOpusCommentHeader(packet) && (\n          <>\n            <h3>\n              Packet {i + 1} ({packet.byteLength} bytes) - Ogg Opus Comment Header\n            </h3>\n            <p>\n              <a className=\"rfc-link\" href=\"https://datatracker.ietf.org/doc/html/rfc7845#section-5.2\">\n                RFC 7845 - 5.2. Comment Header\n              </a>\n            </p>\n            <OggOpusCommentHeaderTable header={new OggOpusCommentHeader(new DataWindow(packet))} showHex={showHex} />\n            <p />\n          </>\n        )}\n      </React.Fragment>\n    ))}\n  </>\n)\n","import { useEffect, useState } from 'react'\n\nimport './App.scss'\nimport { OggPage } from '../audio/OggPage'\nimport { OggPageHeaderTable } from './OggPageHeaderTable'\nimport _ from 'lodash'\nimport { useShowHex } from './showHexHook'\nimport { Option } from '../util/util'\nimport { Bytes } from '../util/types'\nimport { asHexString } from '../util/hexUtils'\nimport { extractPacketsEntirelyContainedWithinPage } from '../audio/packetExtractor'\nimport { OggPacketsList } from './OggPacketsList'\nexport interface OggPagesTabProps {\n  readonly oggPages: OggPage[]\n}\n\nexport const OggPagesTab = ({ oggPages }: OggPagesTabProps) => {\n  const { showHex } = useShowHex()\n  const [pageNumber, setPageNumber] = useState<number>(0)\n  useEffect(() => setPageNumber(0), [oggPages])\n  const oggPage = pageNumber < oggPages.length ? oggPages[pageNumber] : undefined\n  const packets = oggPage === undefined ? [] : extractPacketsEntirelyContainedWithinPage(oggPage)\n  return (\n    <div className=\"ogg-pages-tab\">\n      <h1>\n        Ogg Page {pageNumber + 1} / {oggPages.length} ({oggPage?.pageSize ?? 0} bytes)\n      </h1>\n      <button onClick={() => setPageNumber(pageNumber - 1)} disabled={pageNumber === 0}>\n        Previous\n      </button>\n      <button onClick={() => setPageNumber(pageNumber + 1)} disabled={pageNumber >= (oggPages?.length ?? 0) - 1}>\n        Next\n      </button>\n      <h2>Ogg Page Header</h2>\n      {oggPage && (\n        <>\n          <p>\n            <a className=\"rfc-link\" href=\"https://datatracker.ietf.org/doc/html/rfc3533#section-6\">\n              RFC 3533 - 6. The Ogg page format\n            </a>\n          </p>\n          <OggPageHeaderTable page={oggPage} showHex={showHex} />\n          <h2>Ogg Packets</h2>\n          <OggPacketsList packets={packets} showHex={showHex} />\n          <h2>Segments</h2>\n          {_.range(0, oggPage.numberOfPageSegments).map((segmentIndex) => (\n            <SegmentInfo\n              key={`segment-${segmentIndex}`}\n              number={segmentIndex + 1}\n              size={oggPage.getSegmentSize(segmentIndex)}\n              hex={showHex ? asHexString(oggPage.getSegment(segmentIndex), true) : undefined}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  )\n}\n\ninterface SegmentInfoProps {\n  number: number\n  size: Bytes\n  hex: Option<string>\n}\n\nconst SegmentInfo = ({ number, size, hex }: SegmentInfoProps) => (\n  <>\n    <h3>\n      Segment {number} ({size} bytes)\n    </h3>\n    {hex && <div className=\"raw-hex\">{hex}</div>}\n  </>\n)\n","import React, { useEffect, useState } from 'react'\n\nimport './App.scss'\nimport { LogicalBitstream } from '../audio/packetExtractor'\nimport { useShowHex } from './showHexHook'\nimport { BitstreamSerialNumber } from '../audio/OggPage'\nimport { detectStreamType } from '../audio/oggParser'\nimport _ from 'lodash'\nimport { OggPacketsList } from './OggPacketsList'\n\nexport interface BitstreamsTabProps {\n  streams: LogicalBitstream[]\n}\n\nexport const BitstreamsTab = ({ streams }: BitstreamsTabProps) => {\n  const { showHex } = useShowHex()\n  const [selectedStreamSerialNumber, setSelectedStreamSerialNumber] = useState<BitstreamSerialNumber>(\n    streams[0].serialNumber\n  )\n  useEffect(() => setSelectedStreamSerialNumber(streams[0].serialNumber), [streams])\n\n  const stream = streams.find((stream) => stream.serialNumber === selectedStreamSerialNumber)\n  if (stream === undefined) {\n    return <></>\n  }\n  return (\n    <div>\n      <h1>Logical Bitstreams</h1>\n      {streams.map((stream) => (\n        <div key={stream.serialNumber}>\n          <input\n            type=\"radio\"\n            id={stream.serialNumber}\n            name={stream.serialNumber}\n            value={stream.serialNumber}\n            checked={stream.serialNumber === selectedStreamSerialNumber}\n            onChange={() => setSelectedStreamSerialNumber(stream.serialNumber)}\n          />\n          <label htmlFor={stream.serialNumber}>\n            <span className=\"bitstream-serial-number-radio-label\">{stream.serialNumber}</span> -{' '}\n            {detectStreamType(stream)} - {stream.packets.length} packets -{' '}\n            {_.sumBy(stream.packets, (packet) => packet.byteLength)} bytes\n          </label>\n        </div>\n      ))}\n      <h2>Ogg Packets</h2>\n      <OggPacketsList packets={stream.packets} showHex={showHex} />\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}